using Moq;
using NUnit.Framework;
using System.Linq.Expressions;

namespace Medallion.Threading.Tests.Core;

// Note: we don't bother testing the extensions for the other providers since they are all auto-generated by the same component.
public class DistributedLockProviderExtensionsTest
{
    [Test]
    public void TestArgumentValidation()
    {
        Assert.Throws<ArgumentNullException>(() => DistributedLockProviderExtensions.TryAcquireLockAsync(null!, "name"));
        Assert.Throws<ArgumentNullException>(() => DistributedLockProviderExtensions.TryAcquireLock(null!, "name"));
        Assert.Throws<ArgumentNullException>(() => DistributedLockProviderExtensions.AcquireLockAsync(null!, "name"));
        Assert.Throws<ArgumentNullException>(() => DistributedLockProviderExtensions.AcquireLock(null!, "name"));
    }

    [Test, Combinatorial]
    public void TestCallThrough([Values] bool isTry, [Values] bool isAsync)
    {
        var mockLock = new Mock<IDistributedLock>();
        var mockProvider = new Mock<IDistributedLockProvider>();
        mockProvider.Setup(p => p.CreateLock("name"))
            .Returns(mockLock.Object)
            .Verifiable();

        if (isTry)
        {
            if (isAsync)
            {
                Test(p => p.TryAcquireLockAsync("name", default, default), l => l.TryAcquireAsync(default, default));
            }
            else
            {
                Test(p => p.TryAcquireLock("name", default, default), l => l.TryAcquire(default, default));
            }
        }
        else
        {
            if (isAsync)
            {
                Test(p => p.AcquireLockAsync("name", default, default), l => l.AcquireAsync(default, default));
            }
            else
            {
                Test(p => p.AcquireLock("name", default, default), l => l.Acquire(default, default));
            }
        }

        void Test<TResult>(
            Expression<Func<IDistributedLockProvider, TResult>> providerFunction, 
            Expression<Func<IDistributedLock, TResult>> lockFunction)
        {
            providerFunction.Compile()(mockProvider.Object);

            mockProvider.Verify(p => p.CreateLock("name"), Times.Once);
            mockLock.Verify(lockFunction, Times.Once());
        }
    }
}
