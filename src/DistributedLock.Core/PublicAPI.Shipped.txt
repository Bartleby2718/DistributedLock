#nullable enable
Medallion.Threading.DeadlockException
Medallion.Threading.DeadlockException.DeadlockException() -> void
Medallion.Threading.DeadlockException.DeadlockException(string! message) -> void
Medallion.Threading.DeadlockException.DeadlockException(string! message, System.Exception! innerException) -> void
Medallion.Threading.DistributedLockProviderExtensions
Medallion.Threading.DistributedReaderWriterLockProviderExtensions
Medallion.Threading.DistributedSemaphoreProviderExtensions
Medallion.Threading.DistributedUpgradeableReaderWriterLockProviderExtensions
Medallion.Threading.IDistributedLock
Medallion.Threading.IDistributedLock.Acquire(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
Medallion.Threading.IDistributedLock.AcquireAsync(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
Medallion.Threading.IDistributedLock.Name.get -> string!
Medallion.Threading.IDistributedLock.TryAcquire(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
Medallion.Threading.IDistributedLock.TryAcquireAsync(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
Medallion.Threading.IDistributedLockProvider
Medallion.Threading.IDistributedLockProvider.CreateLock(string! name) -> Medallion.Threading.IDistributedLock!
Medallion.Threading.IDistributedLockUpgradeableHandle
Medallion.Threading.IDistributedLockUpgradeableHandle.TryUpgradeToWriteLock(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> bool
Medallion.Threading.IDistributedLockUpgradeableHandle.TryUpgradeToWriteLockAsync(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<bool>
Medallion.Threading.IDistributedLockUpgradeableHandle.UpgradeToWriteLock(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
Medallion.Threading.IDistributedLockUpgradeableHandle.UpgradeToWriteLockAsync(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask
Medallion.Threading.IDistributedReaderWriterLock
Medallion.Threading.IDistributedReaderWriterLock.AcquireReadLock(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
Medallion.Threading.IDistributedReaderWriterLock.AcquireReadLockAsync(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
Medallion.Threading.IDistributedReaderWriterLock.AcquireWriteLock(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
Medallion.Threading.IDistributedReaderWriterLock.AcquireWriteLockAsync(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
Medallion.Threading.IDistributedReaderWriterLock.Name.get -> string!
Medallion.Threading.IDistributedReaderWriterLock.TryAcquireReadLock(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
Medallion.Threading.IDistributedReaderWriterLock.TryAcquireReadLockAsync(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
Medallion.Threading.IDistributedReaderWriterLock.TryAcquireWriteLock(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
Medallion.Threading.IDistributedReaderWriterLock.TryAcquireWriteLockAsync(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
Medallion.Threading.IDistributedReaderWriterLockProvider
Medallion.Threading.IDistributedReaderWriterLockProvider.CreateReaderWriterLock(string! name) -> Medallion.Threading.IDistributedReaderWriterLock!
Medallion.Threading.IDistributedSemaphore
Medallion.Threading.IDistributedSemaphore.Acquire(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
Medallion.Threading.IDistributedSemaphore.AcquireAsync(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
Medallion.Threading.IDistributedSemaphore.MaxCount.get -> int
Medallion.Threading.IDistributedSemaphore.Name.get -> string!
Medallion.Threading.IDistributedSemaphore.TryAcquire(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
Medallion.Threading.IDistributedSemaphore.TryAcquireAsync(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
Medallion.Threading.IDistributedSemaphoreProvider
Medallion.Threading.IDistributedSemaphoreProvider.CreateSemaphore(string! name, int maxCount) -> Medallion.Threading.IDistributedSemaphore!
Medallion.Threading.IDistributedSynchronizationHandle
Medallion.Threading.IDistributedSynchronizationHandle.HandleLostToken.get -> System.Threading.CancellationToken
Medallion.Threading.IDistributedUpgradeableReaderWriterLock
Medallion.Threading.IDistributedUpgradeableReaderWriterLock.AcquireUpgradeableReadLock(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedLockUpgradeableHandle!
Medallion.Threading.IDistributedUpgradeableReaderWriterLock.AcquireUpgradeableReadLockAsync(System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedLockUpgradeableHandle!>
Medallion.Threading.IDistributedUpgradeableReaderWriterLock.TryAcquireUpgradeableReadLock(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedLockUpgradeableHandle?
Medallion.Threading.IDistributedUpgradeableReaderWriterLock.TryAcquireUpgradeableReadLockAsync(System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedLockUpgradeableHandle?>
Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider
Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider.CreateUpgradeableReaderWriterLock(string! name) -> Medallion.Threading.IDistributedUpgradeableReaderWriterLock!
static Medallion.Threading.DistributedLockProviderExtensions.AcquireLock(this Medallion.Threading.IDistributedLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
static Medallion.Threading.DistributedLockProviderExtensions.AcquireLockAsync(this Medallion.Threading.IDistributedLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
static Medallion.Threading.DistributedLockProviderExtensions.TryAcquireLock(this Medallion.Threading.IDistributedLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
static Medallion.Threading.DistributedLockProviderExtensions.TryAcquireLockAsync(this Medallion.Threading.IDistributedLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.AcquireReadLock(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.AcquireReadLockAsync(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.AcquireWriteLock(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.AcquireWriteLockAsync(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.TryAcquireReadLock(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.TryAcquireReadLockAsync(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.TryAcquireWriteLock(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
static Medallion.Threading.DistributedReaderWriterLockProviderExtensions.TryAcquireWriteLockAsync(this Medallion.Threading.IDistributedReaderWriterLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
static Medallion.Threading.DistributedSemaphoreProviderExtensions.AcquireSemaphore(this Medallion.Threading.IDistributedSemaphoreProvider! provider, string! name, int maxCount, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle!
static Medallion.Threading.DistributedSemaphoreProviderExtensions.AcquireSemaphoreAsync(this Medallion.Threading.IDistributedSemaphoreProvider! provider, string! name, int maxCount, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle!>
static Medallion.Threading.DistributedSemaphoreProviderExtensions.TryAcquireSemaphore(this Medallion.Threading.IDistributedSemaphoreProvider! provider, string! name, int maxCount, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedSynchronizationHandle?
static Medallion.Threading.DistributedSemaphoreProviderExtensions.TryAcquireSemaphoreAsync(this Medallion.Threading.IDistributedSemaphoreProvider! provider, string! name, int maxCount, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedSynchronizationHandle?>
static Medallion.Threading.DistributedUpgradeableReaderWriterLockProviderExtensions.AcquireUpgradeableReadLock(this Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedLockUpgradeableHandle!
static Medallion.Threading.DistributedUpgradeableReaderWriterLockProviderExtensions.AcquireUpgradeableReadLockAsync(this Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider! provider, string! name, System.TimeSpan? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedLockUpgradeableHandle!>
static Medallion.Threading.DistributedUpgradeableReaderWriterLockProviderExtensions.TryAcquireUpgradeableReadLock(this Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Medallion.Threading.IDistributedLockUpgradeableHandle?
static Medallion.Threading.DistributedUpgradeableReaderWriterLockProviderExtensions.TryAcquireUpgradeableReadLockAsync(this Medallion.Threading.IDistributedUpgradeableReaderWriterLockProvider! provider, string! name, System.TimeSpan timeout = default(System.TimeSpan), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<Medallion.Threading.IDistributedLockUpgradeableHandle?>